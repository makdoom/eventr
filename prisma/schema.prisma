generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String                 @unique
  emailVerified        DateTime?
  image                String?
  username             String?                @unique
  grantId              String?
  grantEmail           String?
  about                String?
  accounts             Account[]
  sessions             Session[]
  availabilitySchedule AvailabilitySchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// enum Day {
//   Sunday
//   Monday
//   Tuesday
//   Wednesday
//   Thursday
//   Friday
//   Saturday
// }

// model Availability {
//   id       String  @id @default(cuid())
//   day      Day
//   fromTime String
//   tillTime String
//   isActive Boolean @default(true)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   User      User?    @relation(fields: [userId], references: [id])
//   userId    String?
// }

model AvailabilitySchedule {
  id        String     @id @default(cuid())
  eventName String
  isDefault Boolean    @default(false)
  schedule  Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Schedule {
  id       String  @id @default(cuid())
  day      String
  isActive Boolean @default(false)
  fromTime String
  tillTime String

  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  AvailabilitySchedule   AvailabilitySchedule? @relation(fields: [availabilityScheduleId], references: [id])
  availabilityScheduleId String?
}
